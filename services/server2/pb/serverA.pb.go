// Code generated by protoc-gen-go. DO NOT EDIT.
// source: serverA.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	serverA.proto

It has these top-level messages:
	ServierARequest
	ServierAReply
*/
package pb

import (
	fmt "fmt"
	"grpclb/tracing"

	proto "github.com/golang/protobuf/proto"
	opentracing "github.com/opentracing/opentracing-go"
	"google.golang.org/grpc/metadata"

	math "math"

	context "golang.org/x/net/context"

	"github.com/opentracing/opentracing-go/ext"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type ServierARequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ServierARequest) Reset()                    { *m = ServierARequest{} }
func (m *ServierARequest) String() string            { return proto.CompactTextString(m) }
func (*ServierARequest) ProtoMessage()               {}
func (*ServierARequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServierARequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type ServierAReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *ServierAReply) Reset()                    { *m = ServierAReply{} }
func (m *ServierAReply) String() string            { return proto.CompactTextString(m) }
func (*ServierAReply) ProtoMessage()               {}
func (*ServierAReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServierAReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*ServierARequest)(nil), "pb.ServierARequest")
	proto.RegisterType((*ServierAReply)(nil), "pb.ServierAReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

//hello this is my test This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServerA service

type ServerAClient interface {
	//   Sends a greeting
	ServerAFunc(ctx context.Context, in *ServierARequest, opts ...grpc.CallOption) (*ServierAReply, error)
}

type serverAClient struct {
	cc     *grpc.ClientConn
	tracer opentracing.Tracer
}

func NewServerAClient(tracer opentracing.Tracer, cc *grpc.ClientConn) ServerAClient {
	return &serverAClient{
		cc:     cc,
		tracer: tracer, // self-add
	}
}

func (c *serverAClient) ServerAFunc(ctx context.Context, in *ServierARequest, opts ...grpc.CallOption) (*ServierAReply, error) {
	out := new(ServierAReply)

	// self-add
	var span opentracing.Span
	if span = opentracing.SpanFromContext(ctx); nil == span {
		span, ctx = opentracing.StartSpanFromContext(ctx, "client call /pb.Greeter/SayHello")
		ext.SpanKindRPCServer.Set(span)
	}

	if nil != span {
		toGRPCFunc := tracing.ToGRPCRequest(c.tracer)
		md := metadata.Pairs()
		ctx = toGRPCFunc(ctx, &md)
		ctx = metadata.NewContext(ctx, md)
		defer span.Finish()
	}
	// self-ad

	err := grpc.Invoke(ctx, "/pb.ServerA/ServerAFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServerA service

type ServerAServer interface {
	//   Sends a greeting
	ServerAFunc(context.Context, *ServierARequest) (*ServierAReply, error)
}

func RegisterServerAServer(s *grpc.Server, srv ServerAServer) {
	s.RegisterService(&_ServerA_serviceDesc, srv)
}

func _ServerA_ServerAFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServierARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAServer).ServerAFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerA/ServerAFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAServer).ServerAFunc(ctx, req.(*ServierARequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ServerA",
	HandlerType: (*ServerAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServerAFunc",
			Handler:    _ServerA_ServerAFunc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serverA.proto",
}

func init() { proto.RegisterFile("serverA.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0x72, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe5,
	0xe2, 0x0f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x2d, 0x72, 0x0c, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e,
	0x11, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02,
	0xb3, 0x95, 0x34, 0xb9, 0x78, 0x11, 0xca, 0x0a, 0x72, 0x2a, 0x85, 0x24, 0xb8, 0xd8, 0x73, 0x53,
	0x8b, 0x8b, 0x13, 0xd3, 0x61, 0xea, 0x60, 0x5c, 0x23, 0x27, 0x2e, 0xf6, 0x60, 0x88, 0x35, 0x42,
	0xe6, 0x5c, 0xdc, 0x50, 0xa6, 0x5b, 0x69, 0x5e, 0xb2, 0x90, 0xb0, 0x5e, 0x41, 0x92, 0x1e, 0x9a,
	0x6d, 0x52, 0x82, 0xa8, 0x82, 0x05, 0x39, 0x95, 0x4a, 0x0c, 0x4e, 0x3a, 0x5c, 0xa2, 0xc9, 0xf9,
	0xb9, 0x7a, 0x15, 0x99, 0xc5, 0x19, 0x99, 0x85, 0xa5, 0x7a, 0x25, 0xa9, 0xc5, 0x25, 0x7a, 0xe9,
	0x45, 0x05, 0xc9, 0x4e, 0x30, 0xa3, 0x03, 0x18, 0x17, 0x31, 0xc1, 0xd8, 0x49, 0x6c, 0x60, 0xef,
	0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x19, 0x15, 0x00, 0xdf, 0x00, 0x00, 0x00,
}
